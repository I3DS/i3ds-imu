#ifndef GENERATED_ASN1SCC_DMU30_H
#define GENERATED_ASN1SCC_DMU30_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef asn1SccUint Word_Type;

#define Word_Type_REQUIRED_BYTES_FOR_ENCODING       2 
#define Word_Type_REQUIRED_BITS_FOR_ENCODING        16
#define Word_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define Word_Type_REQUIRED_BITS_FOR_ACN_ENCODING    16
#define Word_Type_REQUIRED_BYTES_FOR_XER_ENCODING   43

void Word_Type_Initialize(Word_Type* pVal);
flag Word_Type_IsConstraintValid(const Word_Type* val, int* pErrCode);
#ifndef ERR_Word_Type 
#define ERR_Word_Type		1001  /*(0 .. 65535)*/
#endif

typedef double Real_Type;

#define Real_Type_REQUIRED_BYTES_FOR_ENCODING       13 
#define Real_Type_REQUIRED_BITS_FOR_ENCODING        104
#define Real_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   13 
#define Real_Type_REQUIRED_BITS_FOR_ACN_ENCODING    104
#define Real_Type_REQUIRED_BYTES_FOR_XER_ENCODING   73

void Real_Type_Initialize(Real_Type* pVal);
flag Real_Type_IsConstraintValid(const Real_Type* val, int* pErrCode);
#ifndef ERR_Real_Type 
#define ERR_Real_Type		1002  /*(-3.40282346600000020000E+038 .. 3.40282346600000020000E+038)*/
#endif

typedef struct {
    flag extendable_checksum_fail;
    flag nvm_coefficient_checksum_fail;
    flag sensor_start_up_error;
    flag internal_processor_error;
    flag invalid_nvm_coefficient;
} Startup_Flags_Type;

#define Startup_Flags_Type_REQUIRED_BYTES_FOR_ENCODING       1 
#define Startup_Flags_Type_REQUIRED_BITS_FOR_ENCODING        5
#define Startup_Flags_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define Startup_Flags_Type_REQUIRED_BITS_FOR_ACN_ENCODING    5
#define Startup_Flags_Type_REQUIRED_BYTES_FOR_XER_ENCODING   373

void Startup_Flags_Type_Initialize(Startup_Flags_Type* pVal);
flag Startup_Flags_Type_IsConstraintValid(const Startup_Flags_Type* val, int* pErrCode);


typedef struct {
    flag voltage_regulator_range_error;
    flag scheduler_slot_extended;
    flag output_message_missed;
    flag internal_processor_error;
    flag sensor_operation_error;
    flag output_over_range;
    flag accelerometer_plausibility_error;
} Operation_Flags_Type;

#define Operation_Flags_Type_REQUIRED_BYTES_FOR_ENCODING       1 
#define Operation_Flags_Type_REQUIRED_BITS_FOR_ENCODING        7
#define Operation_Flags_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define Operation_Flags_Type_REQUIRED_BITS_FOR_ACN_ENCODING    7
#define Operation_Flags_Type_REQUIRED_BYTES_FOR_XER_ENCODING   507

void Operation_Flags_Type_Initialize(Operation_Flags_Type* pVal);
flag Operation_Flags_Type_IsConstraintValid(const Operation_Flags_Type* val, int* pErrCode);


typedef struct {
    flag axis_x_rate;
    flag axis_x_acceleration;
    flag axis_y_rate;
    flag axis_y_acceleration;
    flag axis_z_rate;
    flag axis_z_acceleration;
    flag aux_input_voltage;
    flag average_imu_temperature;
    flag axis_x_delta_theta;
    flag axis_x_vel;
    flag axis_y_delta_theta;
    flag axis_y_vel;
    flag axis_z_delta_theta;
    flag axis_z_vel;
} Error_Flags_Type;

#define Error_Flags_Type_REQUIRED_BYTES_FOR_ENCODING       2 
#define Error_Flags_Type_REQUIRED_BITS_FOR_ENCODING        14
#define Error_Flags_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   2 
#define Error_Flags_Type_REQUIRED_BITS_FOR_ACN_ENCODING    14
#define Error_Flags_Type_REQUIRED_BYTES_FOR_XER_ENCODING   717

void Error_Flags_Type_Initialize(Error_Flags_Type* pVal);
flag Error_Flags_Type_IsConstraintValid(const Error_Flags_Type* val, int* pErrCode);


typedef struct {
    Word_Type message_count;
    Real_Type axis_x_rate;
    Real_Type axis_x_acceleration;
    Real_Type axis_y_rate;
    Real_Type axis_y_acceleration;
    Real_Type axis_z_rate;
    Real_Type axis_z_acceleration;
    Real_Type aux_input_voltage;
    Real_Type average_temperature;
    Real_Type axis_x_delta_theta;
    Real_Type axis_x_vel;
    Real_Type axis_y_delta_theta;
    Real_Type axis_y_vel;
    Real_Type axis_z_delta_theta;
    Real_Type axis_z_vel;
    Startup_Flags_Type startup_flags;
    Operation_Flags_Type operation_flags;
    Error_Flags_Type error_flags;
} Message_Type;

#define Message_Type_REQUIRED_BYTES_FOR_ENCODING       188 
#define Message_Type_REQUIRED_BITS_FOR_ENCODING        1498
#define Message_Type_REQUIRED_BYTES_FOR_ACN_ENCODING   188 
#define Message_Type_REQUIRED_BITS_FOR_ACN_ENCODING    1498
#define Message_Type_REQUIRED_BYTES_FOR_XER_ENCODING   2837

void Message_Type_Initialize(Message_Type* pVal);
flag Message_Type_IsConstraintValid(const Message_Type* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag Word_Type_Encode(const Word_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Word_Type_Decode(Word_Type* pVal, BitStream* pBitStrm, int* pErrCode);
flag Real_Type_Encode(const Real_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Real_Type_Decode(Real_Type* pVal, BitStream* pBitStrm, int* pErrCode);
flag Startup_Flags_Type_Encode(const Startup_Flags_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Startup_Flags_Type_Decode(Startup_Flags_Type* pVal, BitStream* pBitStrm, int* pErrCode);
flag Operation_Flags_Type_Encode(const Operation_Flags_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Operation_Flags_Type_Decode(Operation_Flags_Type* pVal, BitStream* pBitStrm, int* pErrCode);
flag Error_Flags_Type_Encode(const Error_Flags_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Error_Flags_Type_Decode(Error_Flags_Type* pVal, BitStream* pBitStrm, int* pErrCode);
flag Message_Type_Encode(const Message_Type* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag Message_Type_Decode(Message_Type* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}

#endif

#endif
